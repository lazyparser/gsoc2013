[BaselineOp] Analyzing op @ 0 (end=116): getlocal
[BaselineOp] Analyzing op @ 3 (end=116): pop
[BaselineOp] Analyzing op @ 4 (end=116): getlocal
[BaselineOp] Analyzing op @ 7 (end=116): pop
[BaselineOp] Analyzing op @ 8 (end=116): getlocal
[BaselineOp] Analyzing op @ 11 (end=116): pop
[BaselineOp] Analyzing op @ 12 (end=116): zero
[BaselineOp] Analyzing op @ 13 (end=116): setlocal
[BaselineOp] Analyzing op @ 16 (end=116): pop
[BaselineOp] Analyzing op @ 17 (end=116): zero
[BaselineOp] Analyzing op @ 18 (end=116): setlocal
[BaselineOp] Analyzing op @ 21 (end=116): pop
[BaselineOp] Analyzing op @ 22 (end=116): goto
[BaselineOp] Analyzing op @ 27 (end=116): loophead
[BaselineOp] Analyzing op @ 28 (end=116): zero
[BaselineOp] Analyzing op @ 29 (end=116): setlocal
[BaselineOp] Analyzing op @ 32 (end=116): pop
[BaselineOp] Analyzing op @ 33 (end=116): goto
[BaselineOp] Analyzing op @ 38 (end=116): loophead
[BaselineOp] Analyzing op @ 39 (end=116): getlocal
[BaselineOp] Analyzing op @ 42 (end=116): callarg
[BaselineOp] Analyzing op @ 45 (end=116): undefined
[BaselineOp] Analyzing op @ 46 (end=116): notearg
[BaselineOp] Analyzing op @ 47 (end=116): getlocal
[BaselineOp] Analyzing op @ 50 (end=116): notearg
[BaselineOp] Analyzing op @ 51 (end=116): call
[BaselineOp] Analyzing op @ 54 (end=116): add
[BaselineOp] Analyzing op @ 55 (end=116): setlocal
[BaselineOp] Analyzing op @ 58 (end=116): pop
[BaselineOp] Analyzing op @ 59 (end=116): getlocal
[BaselineOp] Analyzing op @ 62 (end=116): pos
[BaselineOp] Analyzing op @ 63 (end=116): dup
[BaselineOp] Analyzing op @ 64 (end=116): one
[BaselineOp] Analyzing op @ 65 (end=116): add
[BaselineOp] Analyzing op @ 66 (end=116): setlocal
[BaselineOp] Analyzing op @ 69 (end=116): pop
[BaselineOp] Analyzing op @ 70 (end=116): pop
[BaselineOp] Analyzing op @ 71 (end=116): loopentry
[BaselineOp] Analyzing op @ 73 (end=116): getlocal
[BaselineOp] Analyzing op @ 76 (end=116): uint16
[BaselineOp] Analyzing op @ 79 (end=116): lt
[BaselineOp] Analyzing op @ 80 (end=116): ifne
[BaselineOp] Analyzing op @ 85 (end=116): getlocal
[BaselineOp] Analyzing op @ 88 (end=116): pos
[BaselineOp] Analyzing op @ 89 (end=116): dup
[BaselineOp] Analyzing op @ 90 (end=116): one
[BaselineOp] Analyzing op @ 91 (end=116): add
[BaselineOp] Analyzing op @ 92 (end=116): setlocal
[BaselineOp] Analyzing op @ 95 (end=116): pop
[BaselineOp] Analyzing op @ 96 (end=116): pop
[BaselineOp] Analyzing op @ 97 (end=116): loopentry
[BaselineOp] Analyzing op @ 99 (end=116): getlocal
[BaselineOp] Analyzing op @ 102 (end=116): uint16
[BaselineOp] Analyzing op @ 105 (end=116): lt
[BaselineOp] Analyzing op @ 106 (end=116): ifne
[BaselineOp] Analyzing op @ 28 (end=116): zero
[BaselineOp] Analyzing op @ 29 (end=116): setlocal
[BaselineOp] Analyzing op @ 32 (end=116): pop
[BaselineOp] Analyzing op @ 33 (end=116): goto
[BaselineOp] Analyzing op @ 38 (end=116): loophead
[BaselineOp] Analyzing op @ 39 (end=116): getlocal
[BaselineOp] Analyzing op @ 42 (end=116): callarg
[BaselineOp] Analyzing op @ 45 (end=116): undefined
[BaselineOp] Analyzing op @ 46 (end=116): notearg
[BaselineOp] Analyzing op @ 47 (end=116): getlocal
[BaselineOp] Analyzing op @ 50 (end=116): notearg
[BaselineOp] Analyzing op @ 51 (end=116): call
[BaselineOp] Analyzing op @ 54 (end=116): add
[BaselineOp] Analyzing op @ 55 (end=116): setlocal
[BaselineOp] Analyzing op @ 58 (end=116): pop
[BaselineOp] Analyzing op @ 59 (end=116): getlocal
[BaselineOp] Analyzing op @ 62 (end=116): pos
[BaselineOp] Analyzing op @ 63 (end=116): dup
[BaselineOp] Analyzing op @ 64 (end=116): one
[BaselineOp] Analyzing op @ 65 (end=116): add
[BaselineOp] Analyzing op @ 66 (end=116): setlocal
[BaselineOp] Analyzing op @ 69 (end=116): pop
[BaselineOp] Analyzing op @ 70 (end=116): pop
[BaselineOp] Analyzing op @ 71 (end=116): loopentry
[BaselineOp] Analyzing op @ 73 (end=116): getlocal
[BaselineOp] Analyzing op @ 76 (end=116): uint16
[BaselineOp] Analyzing op @ 79 (end=116): lt
[BaselineOp] Analyzing op @ 80 (end=116): ifne
[BaselineOp] Analyzing op @ 39 (end=116): getlocal
[BaselineOp] Analyzing op @ 42 (end=116): callarg
[BaselineOp] Analyzing op @ 45 (end=116): undefined
[BaselineOp] Analyzing op @ 46 (end=116): notearg
[BaselineOp] Analyzing op @ 47 (end=116): getlocal
[BaselineOp] Analyzing op @ 50 (end=116): notearg
[BaselineOp] Analyzing op @ 51 (end=116): call
[BaselineOp] Analyzing op @ 54 (end=116): add
[BaselineOp] Analyzing op @ 55 (end=116): setlocal
[BaselineOp] Analyzing op @ 58 (end=116): pop
[BaselineOp] Analyzing op @ 59 (end=116): getlocal
[BaselineOp] Analyzing op @ 62 (end=116): pos
[BaselineOp] Analyzing op @ 63 (end=116): dup
[BaselineOp] Analyzing op @ 64 (end=116): one
[BaselineOp] Analyzing op @ 65 (end=116): add
[BaselineOp] Analyzing op @ 66 (end=116): setlocal
[BaselineOp] Analyzing op @ 69 (end=116): pop
[BaselineOp] Analyzing op @ 70 (end=116): pop
[BaselineOp] Analyzing op @ 71 (end=116): loopentry
[BaselineOp] Analyzing op @ 73 (end=116): getlocal
[BaselineOp] Analyzing op @ 76 (end=116): uint16
[BaselineOp] Analyzing op @ 79 (end=116): lt
[BaselineOp] Analyzing op @ 80 (end=116): ifne
[BaselineOp] Analyzing op @ 85 (end=116): getlocal
[BaselineOp] Analyzing op @ 88 (end=116): pos
[BaselineOp] Analyzing op @ 89 (end=116): dup
[BaselineOp] Analyzing op @ 90 (end=116): one
[BaselineOp] Analyzing op @ 91 (end=116): add
[BaselineOp] Analyzing op @ 92 (end=116): setlocal
[BaselineOp] Analyzing op @ 95 (end=116): pop
[BaselineOp] Analyzing op @ 96 (end=116): pop
[BaselineOp] Analyzing op @ 97 (end=116): loopentry
[BaselineOp] Analyzing op @ 99 (end=116): getlocal
[BaselineOp] Analyzing op @ 102 (end=116): uint16
[BaselineOp] Analyzing op @ 105 (end=116): lt
[BaselineOp] Analyzing op @ 106 (end=116): ifne
[BaselineOp] Analyzing op @ 111 (end=116): getlocal
[BaselineOp] Analyzing op @ 114 (end=116): return
[BaselineOp] Analyzing op @ 115 (end=116): stop
[BaselineScripts] Baseline compiling script bitops-3bit-bits-in-byte.js:28 (0x7fc4d8b511f0)
[BaselineOp] Compiling op @ 0: getlocal
[BaselineOp] Compiling op @ 3: pop
[BaselineOp] Compiling op @ 4: getlocal
[BaselineOp] Compiling op @ 7: pop
[BaselineOp] Compiling op @ 8: getlocal
[BaselineOp] Compiling op @ 11: pop
[BaselineOp] Compiling op @ 12: zero
[BaselineOp] Compiling op @ 13: setlocal
[BaselineOp] Compiling op @ 16: pop
[BaselineOp] Compiling op @ 17: zero
[BaselineOp] Compiling op @ 18: setlocal
[BaselineOp] Compiling op @ 21: pop
[BaselineOp] Compiling op @ 22: goto
[BaselineOp] Compiling op @ 27: loophead
[BaselineOp] [block counter] Emitting a block counter for op @ 27: loophead (lineno: 32 column: 0)
[BaselineOp] Compiling op @ 28: zero
[BaselineOp] [block counter] Emitting a block counter for op @ 28: zero (lineno: 32 column: 4)
[BaselineOp] Compiling op @ 29: setlocal
[BaselineOp] Compiling op @ 32: pop
[BaselineOp] Compiling op @ 33: goto
[BaselineOp] Compiling op @ 38: loophead
[BaselineOp] [block counter] Emitting a block counter for op @ 38: loophead (lineno: 32 column: 25)
[BaselineOp] Compiling op @ 39: getlocal
[BaselineOp] [block counter] Emitting a block counter for op @ 39: getlocal (lineno: 32 column: 25)
[BaselineOp] Compiling op @ 42: callarg
[BaselineOp] Compiling op @ 45: undefined
[BaselineOp] Compiling op @ 46: notearg
[BaselineOp] Compiling op @ 47: getlocal
[BaselineOp] Compiling op @ 50: notearg
[BaselineOp] Compiling op @ 51: call
[BaselineOp] Compiling op @ 54: add
[BaselineOp] Compiling op @ 55: setlocal
[BaselineOp] Compiling op @ 58: pop
[BaselineOp] Compiling op @ 59: getlocal
[BaselineOp] Compiling op @ 62: pos
[BaselineOp] Compiling op @ 63: dup
[BaselineOp] Compiling op @ 64: one
[BaselineOp] Compiling op @ 65: add
[BaselineOp] Compiling op @ 66: setlocal
[BaselineOp] Compiling op @ 69: pop
[BaselineOp] Compiling op @ 70: pop
[BaselineOp] Compiling op @ 71: loopentry
[BaselineOp] [block counter] Emitting a block counter for op @ 71: loopentry (lineno: 32 column: 13)
[BaselineOp] Compiling op @ 73: getlocal
[BaselineOp] Compiling op @ 76: uint16
[BaselineOp] Compiling op @ 79: lt
[BaselineOp] Compiling op @ 80: ifne
[BaselineOp] Compiling op @ 85: getlocal
[BaselineOp] [block counter] Emitting a block counter for op @ 85: getlocal (lineno: 31 column: 20)
[BaselineOp] Compiling op @ 88: pos
[BaselineOp] Compiling op @ 89: dup
[BaselineOp] Compiling op @ 90: one
[BaselineOp] Compiling op @ 91: add
[BaselineOp] Compiling op @ 92: setlocal
[BaselineOp] Compiling op @ 95: pop
[BaselineOp] Compiling op @ 96: pop
[BaselineOp] Compiling op @ 97: loopentry
[BaselineOp] [block counter] Emitting a block counter for op @ 97: loopentry (lineno: 31 column: 13)
[BaselineOp] Compiling op @ 99: getlocal
[BaselineOp] Compiling op @ 102: uint16
[BaselineOp] Compiling op @ 105: lt
[BaselineOp] Compiling op @ 106: ifne
[BaselineOp] Compiling op @ 111: getlocal
[BaselineOp] [block counter] Emitting a block counter for op @ 111: getlocal (lineno: 33 column: 0)
[BaselineOp] Compiling op @ 114: return
[BaselineOp] Compiling op @ 115: stop
[BaselineScripts] Created BaselineScript 0x34b00a0 (raw 0x7fc4da8fe218) for bitops-3bit-bits-in-byte.js:28
[BaselineScripts] [block counter] 8 block counters were emitted for script bitops-3bit-bits-in-byte.js:28 (0x34b00a0) (lineno: 33 column: 11)
[BaselineOp] Analyzing op @ 0 (end=83): getlocal
[BaselineOp] Analyzing op @ 3 (end=83): pop
[BaselineOp] Analyzing op @ 4 (end=83): uint16
[BaselineOp] Analyzing op @ 7 (end=83): setlocal
[BaselineOp] Analyzing op @ 10 (end=83): pop
[BaselineOp] Analyzing op @ 11 (end=83): int8
[BaselineOp] Analyzing op @ 13 (end=83): getlocal
[BaselineOp] Analyzing op @ 16 (end=83): getarg
[BaselineOp] Analyzing op @ 19 (end=83): one
[BaselineOp] Analyzing op @ 20 (end=83): lsh
[BaselineOp] Analyzing op @ 21 (end=83): int8
[BaselineOp] Analyzing op @ 23 (end=83): bitand
[BaselineOp] Analyzing op @ 24 (end=83): rsh
[BaselineOp] Analyzing op @ 25 (end=83): bitand
[BaselineOp] Analyzing op @ 26 (end=83): setlocal
[BaselineOp] Analyzing op @ 29 (end=83): pop
[BaselineOp] Analyzing op @ 30 (end=83): getlocal
[BaselineOp] Analyzing op @ 33 (end=83): int8
[BaselineOp] Analyzing op @ 35 (end=83): getlocal
[BaselineOp] Analyzing op @ 38 (end=83): getarg
[BaselineOp] Analyzing op @ 41 (end=83): int8
[BaselineOp] Analyzing op @ 43 (end=83): rsh
[BaselineOp] Analyzing op @ 44 (end=83): int8
[BaselineOp] Analyzing op @ 46 (end=83): bitand
[BaselineOp] Analyzing op @ 47 (end=83): rsh
[BaselineOp] Analyzing op @ 48 (end=83): bitand
[BaselineOp] Analyzing op @ 49 (end=83): add
[BaselineOp] Analyzing op @ 50 (end=83): setlocal
[BaselineOp] Analyzing op @ 53 (end=83): pop
[BaselineOp] Analyzing op @ 54 (end=83): getlocal
[BaselineOp] Analyzing op @ 57 (end=83): int8
[BaselineOp] Analyzing op @ 59 (end=83): getlocal
[BaselineOp] Analyzing op @ 62 (end=83): getarg
[BaselineOp] Analyzing op @ 65 (end=83): int8
[BaselineOp] Analyzing op @ 67 (end=83): rsh
[BaselineOp] Analyzing op @ 68 (end=83): int8
[BaselineOp] Analyzing op @ 70 (end=83): bitand
[BaselineOp] Analyzing op @ 71 (end=83): rsh
[BaselineOp] Analyzing op @ 72 (end=83): bitand
[BaselineOp] Analyzing op @ 73 (end=83): add
[BaselineOp] Analyzing op @ 74 (end=83): setlocal
[BaselineOp] Analyzing op @ 77 (end=83): pop
[BaselineOp] Analyzing op @ 78 (end=83): getlocal
[BaselineOp] Analyzing op @ 81 (end=83): return
[BaselineOp] Analyzing op @ 82 (end=83): stop
[BaselineScripts] Baseline compiling script bitops-3bit-bits-in-byte.js:7 (0x7fc4d8b512b8)
[BaselineOp] Compiling op @ 0: getlocal
[BaselineOp] Compiling op @ 3: pop
[BaselineOp] Compiling op @ 4: uint16
[BaselineOp] Compiling op @ 7: setlocal
[BaselineOp] Compiling op @ 10: pop
[BaselineOp] Compiling op @ 11: int8
[BaselineOp] Compiling op @ 13: getlocal
[BaselineOp] Compiling op @ 16: getarg
[BaselineOp] Compiling op @ 19: one
[BaselineOp] Compiling op @ 20: lsh
[BaselineOp] Compiling op @ 21: int8
[BaselineOp] Compiling op @ 23: bitand
[BaselineOp] Compiling op @ 24: rsh
[BaselineOp] Compiling op @ 25: bitand
[BaselineOp] Compiling op @ 26: setlocal
[BaselineOp] Compiling op @ 29: pop
[BaselineOp] Compiling op @ 30: getlocal
[BaselineOp] Compiling op @ 33: int8
[BaselineOp] Compiling op @ 35: getlocal
[BaselineOp] Compiling op @ 38: getarg
[BaselineOp] Compiling op @ 41: int8
[BaselineOp] Compiling op @ 43: rsh
[BaselineOp] Compiling op @ 44: int8
[BaselineOp] Compiling op @ 46: bitand
[BaselineOp] Compiling op @ 47: rsh
[BaselineOp] Compiling op @ 48: bitand
[BaselineOp] Compiling op @ 49: add
[BaselineOp] Compiling op @ 50: setlocal
[BaselineOp] Compiling op @ 53: pop
[BaselineOp] Compiling op @ 54: getlocal
[BaselineOp] Compiling op @ 57: int8
[BaselineOp] Compiling op @ 59: getlocal
[BaselineOp] Compiling op @ 62: getarg
[BaselineOp] Compiling op @ 65: int8
[BaselineOp] Compiling op @ 67: rsh
[BaselineOp] Compiling op @ 68: int8
[BaselineOp] Compiling op @ 70: bitand
[BaselineOp] Compiling op @ 71: rsh
[BaselineOp] Compiling op @ 72: bitand
[BaselineOp] Compiling op @ 73: add
[BaselineOp] Compiling op @ 74: setlocal
[BaselineOp] Compiling op @ 77: pop
[BaselineOp] Compiling op @ 78: getlocal
[BaselineOp] Compiling op @ 81: return
[BaselineOp] Compiling op @ 82: stop
[BaselineScripts] Created BaselineScript 0x34a8990 (raw 0x7fc4da8fe730) for bitops-3bit-bits-in-byte.js:7
[BaselineScripts] [block counter] 0 block counters were emitted for script bitops-3bit-bits-in-byte.js:7 (0x34a8990) (lineno: 12 column: 9)
[BaselineScripts] [block counter] Dump 0 block counters for 0x34a8990
[BaselineScripts] [block counter] Dump 8 block counters for 0x34b00a0
[BaselineScripts] [block counter] Op offset: 27, count: 4
[BaselineScripts] [block counter] Op offset: 28, count: 4
[BaselineScripts] [block counter] Op offset: 38, count: 1180
[BaselineScripts] [block counter] Op offset: 39, count: 1180
[BaselineScripts] [block counter] Op offset: 71, count: 1185
[BaselineScripts] [block counter] Op offset: 85, count: 4
[BaselineScripts] [block counter] Op offset: 97, count: 4
[BaselineScripts] [block counter] Op offset: 111, count: 0
