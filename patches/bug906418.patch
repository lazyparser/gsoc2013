# HG changeset patch
# Parent a66d94476e535e31d23c1235c3368da47999e2d3
# User Wei Wu <lazyparser@gmail.com>
Bug 906418 IonMonkey: Decouple the stack state from graph traversal order of LIR blocks. r=

diff --git a/js/src/jit/CodeGenerator.cpp b/js/src/jit/CodeGenerator.cpp
--- a/js/src/jit/CodeGenerator.cpp
+++ b/js/src/jit/CodeGenerator.cpp
@@ -2632,16 +2632,26 @@ CodeGenerator::generateBody()
             if (!blockCounts.ref().init())
                 return false;
         }
 
 #if defined(JS_ION_PERF)
         perfSpewer->startBasicBlock(current->mir(), masm);
 #endif
 
+        // QUESTION: Should we pop out these fake slots
+        // when we leave the LBlock?
+        size_t numArgumentsOrig = pushedArgumentSlots_.length();
+        IonSpew(IonSpew_BranchProfiles,"codegen pushArguments: %u -> %u",
+                numArgumentsOrig, current->pushedArguments.length());
+        for (size_t i = numArgumentsOrig; i < current->pushedArguments.length(); i++) {
+            if (pushedArgumentSlots_.append(current->pushedArguments[i]))
+                return false;
+        }
+
         for (; iter != current->end(); iter++) {
             IonSpew(IonSpew_Codegen, "instruction %s", iter->opName());
 
             if (counts)
                 blockCounts.ref().visitInstruction(*iter);
 
             if (iter->safepoint() && pushedArgumentSlots_.length()) {
                 if (!markArgumentSlots(iter->safepoint()))
diff --git a/js/src/jit/Ion.cpp b/js/src/jit/Ion.cpp
--- a/js/src/jit/Ion.cpp
+++ b/js/src/jit/Ion.cpp
@@ -1262,16 +1262,21 @@ GenerateLIR(MIRGenerator *mir)
 
     // Now that all optimization and register allocation is done, re-introduce
     // critical edges to avoid unnecessary jumps.
     if (!UnsplitEdges(lir))
         return NULL;
     IonSpewPass("Unsplit Critical Edges");
     AssertBasicGraphCoherency(graph);
 
+    if (!PropagatePushedArguments(lir))
+        return NULL;
+    IonSpewPass("Propagate Pushed Arguments");
+    AssertBasicGraphCoherency(graph);
+
     return lir;
 }
 
 CodeGenerator *
 GenerateCode(MIRGenerator *mir, LIRGraph *lir, MacroAssembler *maybeMasm)
 {
     CodeGenerator *codegen = js_new<CodeGenerator>(mir, lir, maybeMasm);
     if (!codegen)
diff --git a/js/src/jit/IonAnalysis.cpp b/js/src/jit/IonAnalysis.cpp
--- a/js/src/jit/IonAnalysis.cpp
+++ b/js/src/jit/IonAnalysis.cpp
@@ -1607,16 +1607,45 @@ ion::UnsplitEdges(LIRGraph *lir)
         lir->mir().removeBlock(mirBlock);
         --i;
     }
 
     return true;
 }
 
 bool
+ion::PropagatePushedArguments(LIRGraph *lir)
+{
+    js::Vector<uint32_t, 0, SystemAllocPolicy> pushedArguments;
+    for (size_t i = 0; i < lir->numBlocks(); i++) {
+        LBlock *block = lir->getBlock(i);
+        block->pushedArguments.appendAll(pushedArguments);
+        size_t numPoped = 0;
+        for (LInstructionIterator iter = block->begin(); iter != block->end(); iter++) {
+            if (iter->isStackArgT() && !pushedArguments.append(iter->toStackArgT()->argslot()))
+                return false;
+
+            if (iter->isStackArgV() && !pushedArguments.append(iter->toStackArgV()->argslot()))
+                return false;
+
+            if (iter->isJSCall())
+                numPoped = iter->mirRaw()->toCall()->numStackArgs();
+
+            while (numPoped) {
+                JS_ASSERT(pushedArguments.length());
+                pushedArguments.popBack();
+                --numPoped;
+            }
+        }
+    }
+    JS_ASSERT(pushedArguments.length() == 0);
+    return true;
+}
+
+bool
 LinearSum::multiply(int32_t scale)
 {
     for (size_t i = 0; i < terms_.length(); i++) {
         if (!SafeMul(scale, terms_[i].scale, &terms_[i].scale))
             return false;
     }
     return SafeMul(scale, constant_, &constant_);
 }
diff --git a/js/src/jit/IonAnalysis.h b/js/src/jit/IonAnalysis.h
--- a/js/src/jit/IonAnalysis.h
+++ b/js/src/jit/IonAnalysis.h
@@ -63,16 +63,19 @@ void
 AssertExtendedGraphCoherency(MIRGraph &graph);
 
 bool
 EliminateRedundantChecks(MIRGraph &graph);
 
 bool
 UnsplitEdges(LIRGraph *lir);
 
+bool
+PropagatePushedArguments(LIRGraph *lir);
+
 class MDefinition;
 
 // Simple linear sum of the form 'n' or 'x + n'.
 struct SimpleLinearSum
 {
     MDefinition *term;
     int32_t constant;
 
diff --git a/js/src/jit/LIR-Common.h b/js/src/jit/LIR-Common.h
--- a/js/src/jit/LIR-Common.h
+++ b/js/src/jit/LIR-Common.h
@@ -957,16 +957,19 @@ class LJSCallInstructionHelper : public 
     uint32_t numStackArgs() const {
         JS_ASSERT(mir()->numStackArgs() >= 1);
         return mir()->numStackArgs() - 1; // |this| is not a formal argument.
     }
     // Does not include |this|.
     uint32_t numActualArgs() const {
         return mir()->numActualArgs();
     }
+    bool isJSCall() const {
+        return true;
+    }
 
     typedef LJSCallInstructionHelper<Defs, Operands, Temps> JSCallHelper;
 };
 
 // Generates a polymorphic callsite, wherein the function being called is
 // unknown and anticipated to vary.
 class LCallGeneric : public LJSCallInstructionHelper<BOX_PIECES, 1, 2>
 {
diff --git a/js/src/jit/LIR.h b/js/src/jit/LIR.h
--- a/js/src/jit/LIR.h
+++ b/js/src/jit/LIR.h
@@ -643,16 +643,19 @@ class LInstruction
     // transfer instruction, or zero otherwise.
     virtual size_t numSuccessors() const = 0;
     virtual MBasicBlock *getSuccessor(size_t i) const = 0;
     virtual void setSuccessor(size_t i, MBasicBlock *successor) = 0;
 
     virtual bool isCall() const {
         return false;
     }
+    virtual bool isJSCall() const {
+        return false;
+    }
     uint32_t id() const {
         return id_;
     }
     void setId(uint32_t id) {
         JS_ASSERT(!id_);
         JS_ASSERT(id);
         id_ = id;
     }
@@ -741,16 +744,19 @@ class LBlock : public TempObject
 
     LBlock(MBasicBlock *block)
       : block_(block),
         entryMoveGroup_(NULL),
         exitMoveGroup_(NULL)
     { }
 
   public:
+    js::Vector<uint32_t, 0, SystemAllocPolicy> pushedArguments;
+
+  public:
     static LBlock *New(MBasicBlock *from) {
         return new LBlock(from);
     }
     void add(LInstruction *ins) {
         instructions_.pushBack(ins);
     }
     bool addPhi(LPhi *phi) {
         return phis_.append(phi);
