diff --git a/js/src/ion/IonSpewer.cpp b/js/src/ion/IonSpewer.cpp
index 5c4ac32..3c66559 100644
--- a/js/src/ion/IonSpewer.cpp
+++ b/js/src/ion/IonSpewer.cpp
@@ -323,20 +323,23 @@ ion::CheckLogging()
     if (ContainsFlag(env, "bl-all")) {
         EnableChannel(IonSpew_BaselineAbort);
         EnableChannel(IonSpew_BaselineScripts);
         EnableChannel(IonSpew_BaselineOp);
         EnableChannel(IonSpew_BaselineIC);
         EnableChannel(IonSpew_BaselineICFallback);
         EnableChannel(IonSpew_BaselineOSR);
         EnableChannel(IonSpew_BaselineBailouts);
     }
 
+    if (ContainsFlag(env, "BranchProfile"))
+        EnableChannel(IonSpew_BranchProfile);
+
     if (LoggingBits != 0)
         EnableIonDebugLogging();
 
     IonSpewFile = stderr;
 }
 
 void
 ion::IonSpewStartVA(IonSpewChannel channel, const char *fmt, va_list ap)
 {
     if (!IonSpewEnabled(channel))
diff --git a/js/src/ion/IonSpewer.h b/js/src/ion/IonSpewer.h
index 4f6ad0e..5e04152 100644
--- a/js/src/ion/IonSpewer.h
+++ b/js/src/ion/IonSpewer.h
@@ -64,21 +64,22 @@ namespace ion {
     _(BaselineScripts)                      \
     /* Detailed op-specific spew. */        \
     _(BaselineOp)                           \
     /* Inline caches. */                    \
     _(BaselineIC)                           \
     /* Inline cache fallbacks. */           \
     _(BaselineICFallback)                   \
     /* OSR from Baseline => Ion. */         \
     _(BaselineOSR)                          \
     /* Bailouts. */                         \
-    _(BaselineBailouts)
+    _(BaselineBailouts)                     \
+    _(BranchProfile)
 
 
 enum IonSpewChannel {
 #define IONSPEW_CHANNEL(name) IonSpew_##name,
     IONSPEW_CHANNEL_LIST(IONSPEW_CHANNEL)
 #undef IONSPEW_CHANNEL
     IonSpew_Terminator
 };
 
 
diff --git a/js/src/jsinterp.cpp b/js/src/jsinterp.cpp
index 5b70a09..c92a723 100644
--- a/js/src/jsinterp.cpp
+++ b/js/src/jsinterp.cpp
@@ -36,20 +36,27 @@
 
 #include "builtin/Eval.h"
 #include "vm/Debugger.h"
 #include "vm/Shape.h"
 
 #include "ion/Ion.h"
 #include "ion/BaselineJIT.h"
 
 #ifdef JS_ION
 #include "ion/IonFrames-inl.h"
+#include "ion/IonSpewer.h"
+#define SPEWBRANCH(stmt,address)                                              \
+        js::ion::IonSpew(js::ion::IonSpew_BranchProfile,                      \
+                "%p [%s] %u [%s] %d", address, stmt,                          \
+                JS_PCToLineNumber(cx, cx->fp()->script(), address),           \
+                cx->fp()->script()->filename(),                               \
+                cx->fp()->script()->lineno);
 #endif
 
 #include "jsatominlines.h"
 #include "jsboolinlines.h"
 #include "jsinferinlines.h"
 #include "jsinterpinlines.h"
 #include "jsobjinlines.h"
 #include "jsopcodeinlines.h"
 #include "jsprobes.h"
 #include "jsscriptinlines.h"
@@ -1049,20 +1056,21 @@ js::Interpret(JSContext *cx, StackFrame *entryFrame, InterpMode interpMode, bool
      */
 #define CHECK_BRANCH()                                                        \
     JS_BEGIN_MACRO                                                            \
         if (cx->runtime->interrupt && !js_HandleExecutionInterrupt(cx))       \
             goto error;                                                       \
     JS_END_MACRO
 
 #define BRANCH(n)                                                             \
     JS_BEGIN_MACRO                                                            \
         regs.pc += (n);                                                       \
+        SPEWBRANCH("BRANCH", regs.pc);                                        \
         op = (JSOp) *regs.pc;                                                 \
         if ((n) <= 0)                                                         \
             goto check_backedge;                                              \
         DO_OP();                                                              \
     JS_END_MACRO
 
 #define SET_SCRIPT(s)                                                         \
     JS_BEGIN_MACRO                                                            \
         script = (s);                                                         \
         if (script->hasAnyBreakpointsOrStepMode() || script->hasScriptCounts) \
@@ -1461,63 +1469,76 @@ BEGIN_CASE(JSOP_STOP)
     }
     interpReturnOK = true;
     goto exit;
 }
 
 BEGIN_CASE(JSOP_DEFAULT)
     regs.sp--;
     /* FALL THROUGH */
 BEGIN_CASE(JSOP_GOTO)
 {
+    SPEWBRANCH("GOTO", regs.pc);
     len = GET_JUMP_OFFSET(regs.pc);
     BRANCH(len);
 }
 END_CASE(JSOP_GOTO)
 
 BEGIN_CASE(JSOP_IFEQ)
 {
     bool cond = ToBooleanOp(cx);
     regs.sp--;
     if (cond == false) {
+        SPEWBRANCH("IFEQ_JUMP", regs.pc);
         len = GET_JUMP_OFFSET(regs.pc);
         BRANCH(len);
+    }else{
+        SPEWBRANCH("IFEQ_NOJUMP", regs.pc);
     }
 }
 END_CASE(JSOP_IFEQ)
 
 BEGIN_CASE(JSOP_IFNE)
 {
     bool cond = ToBooleanOp(cx);
     regs.sp--;
     if (cond != false) {
+        SPEWBRANCH("IFNE_JUMP", regs.pc);
         len = GET_JUMP_OFFSET(regs.pc);
         BRANCH(len);
+    }else{
+        SPEWBRANCH("IFNE_NOJUMP", regs.pc);
     }
 }
 END_CASE(JSOP_IFNE)
 
 BEGIN_CASE(JSOP_OR)
 {
     bool cond = ToBooleanOp(cx);
     if (cond == true) {
+        SPEWBRANCH("OR_JUMP", regs.pc);
         len = GET_JUMP_OFFSET(regs.pc);
         DO_NEXT_OP(len);
+    }else{
+        SPEWBRANCH("OR_NOJUMP", regs.pc);
     }
 }
 END_CASE(JSOP_OR)
 
 BEGIN_CASE(JSOP_AND)
 {
     bool cond = ToBooleanOp(cx);
     if (cond == false) {
+        SPEWBRANCH("AND_JUMP", regs.pc);
         len = GET_JUMP_OFFSET(regs.pc);
         DO_NEXT_OP(len);
+    }else{
+        SPEWBRANCH("AND_NOJUMP", regs.pc);
     }
 }
 END_CASE(JSOP_AND)
 
 #define FETCH_ELEMENT_ID(n, id)                                               \
     JS_BEGIN_MACRO                                                            \
         const Value &idval_ = regs.sp[n];                                     \
         if (!ValueToId<CanGC>(cx, idval_, &id))                               \
             goto error;                                                       \
     JS_END_MACRO
@@ -1548,20 +1569,21 @@ BEGIN_CASE(JSOP_IN)
     RootedObject &obj = rootObject0;
     obj = &rref.toObject();
     RootedId &id = rootId0;
     FETCH_ELEMENT_ID(-2, id);
     RootedObject &obj2 = rootObject1;
     RootedShape &prop = rootShape0;
     if (!JSObject::lookupGeneric(cx, obj, id, &obj2, &prop))
         goto error;
     bool cond = prop != NULL;
     prop = NULL;
+    SPEWBRANCH("IN", regs.pc);
     TRY_BRANCH_AFTER_COND(cond, 2);
     regs.sp--;
     regs.sp[-1].setBoolean(cond);
 }
 END_CASE(JSOP_IN)
 
 BEGIN_CASE(JSOP_ITER)
 {
     JS_ASSERT(regs.stackDepth() >= 1);
     uint8_t flags = GET_UINT8(regs.pc);
@@ -1768,75 +1790,82 @@ BEGIN_CASE(JSOP_STRICTNE)
     STRICT_EQUALITY_OP(!=, cond);
     regs.sp[-1].setBoolean(cond);
 }
 END_CASE(JSOP_STRICTNE)
 
 BEGIN_CASE(JSOP_CASE)
 {
     bool cond;
     STRICT_EQUALITY_OP(==, cond);
     if (cond) {
+        SPEWBRANCH("CASE_JUMP", regs.pc);
         regs.sp--;
         len = GET_JUMP_OFFSET(regs.pc);
         BRANCH(len);
+    }else{
+        SPEWBRANCH("CASE_NOJUMP", regs.pc);
     }
 }
 END_CASE(JSOP_CASE)
 
 #undef STRICT_EQUALITY_OP
 
 BEGIN_CASE(JSOP_LT)
 {
     bool cond;
     MutableHandleValue lval = MutableHandleValue::fromMarkedLocation(&regs.sp[-2]);
     MutableHandleValue rval = MutableHandleValue::fromMarkedLocation(&regs.sp[-1]);
     if (!LessThanOperation(cx, lval, rval, &cond))
         goto error;
+    SPEWBRANCH("LT", regs.pc);
     TRY_BRANCH_AFTER_COND(cond, 2);
     regs.sp[-2].setBoolean(cond);
     regs.sp--;
 }
 END_CASE(JSOP_LT)
 
 BEGIN_CASE(JSOP_LE)
 {
     bool cond;
     MutableHandleValue lval = MutableHandleValue::fromMarkedLocation(&regs.sp[-2]);
     MutableHandleValue rval = MutableHandleValue::fromMarkedLocation(&regs.sp[-1]);
     if (!LessThanOrEqualOperation(cx, lval, rval, &cond))
         goto error;
+    SPEWBRANCH("LE", regs.pc);
     TRY_BRANCH_AFTER_COND(cond, 2);
     regs.sp[-2].setBoolean(cond);
     regs.sp--;
 }
 END_CASE(JSOP_LE)
 
 BEGIN_CASE(JSOP_GT)
 {
     bool cond;
     MutableHandleValue lval = MutableHandleValue::fromMarkedLocation(&regs.sp[-2]);
     MutableHandleValue rval = MutableHandleValue::fromMarkedLocation(&regs.sp[-1]);
     if (!GreaterThanOperation(cx, lval, rval, &cond))
         goto error;
+    SPEWBRANCH("GT", regs.pc);
     TRY_BRANCH_AFTER_COND(cond, 2);
     regs.sp[-2].setBoolean(cond);
     regs.sp--;
 }
 END_CASE(JSOP_GT)
 
 BEGIN_CASE(JSOP_GE)
 {
     bool cond;
     MutableHandleValue lval = MutableHandleValue::fromMarkedLocation(&regs.sp[-2]);
     MutableHandleValue rval = MutableHandleValue::fromMarkedLocation(&regs.sp[-1]);
     if (!GreaterThanOrEqualOperation(cx, lval, rval, &cond))
         goto error;
+    SPEWBRANCH("GE", regs.pc);
     TRY_BRANCH_AFTER_COND(cond, 2);
     regs.sp[-2].setBoolean(cond);
     regs.sp--;
 }
 END_CASE(JSOP_GE)
 
 #define SIGNED_SHIFT_OP(OP)                                                   \
     JS_BEGIN_MACRO                                                            \
         int32_t i, j;                                                         \
         if (!ToInt32(cx, regs.sp[-2], &i))                                    \
